import React, { useState, useEffect } from 'react';
import { Moon, Sun, Volume2, VolumeX, Download, Upload, Trash2, RefreshCw, Globe, Palette, Package } from 'lucide-react';
import { DatabaseSettings } from './DatabaseSettings';
import { ExportWizard } from '../Export/ExportWizard';
import { useWorldsData } from '@/hooks/useLocalStorage';
import { PluginManager } from './PluginManager';
import { PluginStore } from './PluginStore';

interface SettingsProps {
  currentWorldId: string | null;
}

interface AppSettings {
  theme: 'light' | 'dark' | 'auto';
  soundEnabled: boolean;
  language: 'uk' | 'en' | 'pl';
  autoSave: boolean;
  autoSaveInterval: number; // –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
  showAnimations: boolean;
  compactMode: boolean;
}

const defaultSettings: AppSettings = {
  theme: 'dark',
  soundEnabled: true,
  language: 'uk',
  autoSave: true,
  autoSaveInterval: 5,
  showAnimations: true,
  compactMode: false
};

export const Settings: React.FC<SettingsProps> = ({ currentWorldId }) => {
  const [settings, setSettings] = useState<AppSettings>(defaultSettings);
  const [isExporting, setIsExporting] = useState(false);
  const [isImporting, setIsImporting] = useState(false);
  const [showExportWizard, setShowExportWizard] = useState(false);
  const [activeTab, setActiveTab] = useState<'general' | 'database' | 'plugins' | 'store'>('general');
  const { getCurrentWorld } = useWorldsData();

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ localStorage
  useEffect(() => {
    const savedSettings = localStorage.getItem('fantasyWorldBuilder_settings');
    if (savedSettings) {
      try {
        setSettings({ ...defaultSettings, ...JSON.parse(savedSettings) });
      } catch (error) {
        console.error('Error loading settings:', error);
      }
    }
  }, []);

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
  const saveSettings = (newSettings: AppSettings) => {
    setSettings(newSettings);
    localStorage.setItem('fantasyWorldBuilder_settings', JSON.stringify(newSettings));
    
    // –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è —Ç–µ–º–∏
    applyTheme(newSettings.theme);
  };

  const applyTheme = (theme: string) => {
    const root = document.documentElement;
    if (theme === 'light') {
      root.classList.add('light-theme');
    } else {
      root.classList.remove('light-theme');
    }
  };

  const handleSettingChange = (key: keyof AppSettings, value: any) => {
    const newSettings = { ...settings, [key]: value };
    saveSettings(newSettings);
  };

  const handleExportData = async () => {
    setIsExporting(true);
    try {
      const allData = {
        worlds: JSON.parse(localStorage.getItem('fantasyWorldBuilder_worlds') || '[]'),
        characters: JSON.parse(localStorage.getItem('fantasyWorldBuilder_characters') || '[]'),
        settings: settings,
        exportDate: new Date().toISOString(),
        version: '1.0'
      };

      // –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –∑ —É—Å—ñ—Ö —Å–≤—ñ—Ç—ñ–≤
      const worlds = allData.worlds;
      for (const world of worlds) {
        allData[`lore_${world.id}`] = JSON.parse(localStorage.getItem(`fantasyWorldBuilder_lore_${world.id}`) || '[]');
        allData[`chronologies_${world.id}`] = JSON.parse(localStorage.getItem(`fantasyWorldBuilder_chronologies_${world.id}`) || '[]');
        allData[`events_${world.id}`] = JSON.parse(localStorage.getItem(`fantasyWorldBuilder_events_${world.id}`) || '[]');
        allData[`notes_${world.id}`] = JSON.parse(localStorage.getItem(`fantasyWorldBuilder_notes_${world.id}`) || '[]');
        allData[`relationships_${world.id}`] = JSON.parse(localStorage.getItem(`fantasyWorldBuilder_relationships_${world.id}`) || '[]');
        allData[`maps_${world.id}`] = JSON.parse(localStorage.getItem(`fantasyWorldBuilder_maps_${world.id}`) || '[]');
        allData[`markers_${world.id}`] = JSON.parse(localStorage.getItem(`fantasyWorldBuilder_markers_${world.id}`) || '[]');
        allData[`scenarios_${world.id}`] = JSON.parse(localStorage.getItem(`fantasyWorldBuilder_scenarios`) || '[]').filter((s: any) => s.worldId === world.id);
      }

      const dataStr = JSON.stringify(allData, null, 2);
      const dataBlob = new Blob([dataStr], { type: 'application/json' });
      
      const link = document.createElement('a');
      link.href = URL.createObjectURL(dataBlob);
      link.download = `fantasy-world-backup-${new Date().toISOString().split('T')[0]}.json`;
      link.click();
      
      URL.revokeObjectURL(link.href);
    } catch (error) {
      console.error('Export error:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –µ–∫—Å–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö');
    } finally {
      setIsExporting(false);
    }
  };

  const handleImportData = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsImporting(true);
    const reader = new FileReader();
    
    reader.onload = (e) => {
      try {
        const importedData = JSON.parse(e.target?.result as string);
        
        if (confirm('–¶–µ –∑–∞–º—ñ–Ω–∏—Ç—å –≤—Å—ñ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ. –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ?')) {
          // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ
          Object.keys(importedData).forEach(key => {
            if (key.startsWith('fantasyWorldBuilder_') || 
                key.includes('lore_') || 
                key.includes('chronologies_') || 
                key.includes('events_') ||
                key.includes('notes_') ||
                key.includes('relationships_') ||
                key.includes('maps_') ||
                key.includes('markers_') ||
                key.includes('scenarios_')) {
              localStorage.setItem(key, JSON.stringify(importedData[key]));
            }
          });

          // –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
          if (importedData.settings) {
            saveSettings(importedData.settings);
          }

          alert('–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ! –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É.');
        }
      } catch (error) {
        console.error('Import error:', error);
        alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ –¥–∞–Ω–∏—Ö. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª.');
      } finally {
        setIsImporting(false);
        event.target.value = '';
      }
    };
    
    reader.readAsText(file);
  };

  const handleClearAllData = () => {
    if (confirm('–¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Ü –¥–∞–Ω—ñ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É –Ω–∞–∑–∞–≤–∂–¥–∏. –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ?')) {
      if (confirm('–û—Å—Ç–∞–Ω–Ω—î –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è! –í—Å—ñ —Å–≤—ñ—Ç–∏, –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ —Ç–∞ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ!')) {
        // –û—á–∏—â–∞—î–º–æ localStorage
        Object.keys(localStorage).forEach(key => {
          if (key.startsWith('fantasyWorldBuilder_')) {
            localStorage.removeItem(key);
          }
        });
        
        // –°–∫–∏–¥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        setSettings(defaultSettings);
        localStorage.setItem('fantasyWorldBuilder_settings', JSON.stringify(defaultSettings));
        
        alert('–í—Å—ñ –¥–∞–Ω—ñ –æ—á–∏—â–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—Ç–æ—Ä—ñ–Ω–∫—É.');
      }
    }
  };

  const handleResetSettings = () => {
    if (confirm('–°–∫–∏–Ω—É—Ç–∏ –≤—Å—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ –∑–Ω–∞—á–µ–Ω—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º?')) {
      saveSettings(defaultSettings);
    }
  };

  return (
    <div style={{ padding: '2rem', maxWidth: '800px', margin: '0 auto' }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div style={{ marginBottom: '2rem' }}>
        <h1 style={{ 
          fontSize: '2rem', 
          fontWeight: '700', 
          marginBottom: '0.5rem',
          color: 'var(--text-primary)'
        }}>
          ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        </h1>
        <p style={{ color: 'var(--text-secondary)' }}>
          –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑—É–π—Ç–µ –≤–∞—à –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –∑ Fantasy World Builder
        </p>
      </div>

      {/* –í–∫–ª–∞–¥–∫–∏ */}
      <div style={{
        display: 'flex',
        gap: '0.5rem',
        marginBottom: '2rem',
        borderBottom: '1px solid var(--border-primary)'
      }}>
        {[
          { id: 'general', label: '–ó–∞–≥–∞–ª—å–Ω—ñ', icon: '‚öôÔ∏è' },
          { id: 'database', label: '–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö', icon: 'üóÑÔ∏è' },
          { id: 'plugins', label: '–ü–ª–∞–≥—ñ–Ω–∏', icon: 'üß©' },
          { id: 'store', label: '–ú–∞–≥–∞–∑–∏–Ω', icon: 'üè™' }
        ].map(tab => (
          <button
            key={tab.id}
            className={activeTab === tab.id ? 'btn btn-primary' : 'btn btn-secondary'}
            onClick={() => setActiveTab(tab.id as any)}
            style={{
              fontSize: '0.875rem',
              padding: '0.75rem 1.5rem',
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem'
            }}
          >
            <span>{tab.icon}</span>
            {tab.label}
          </button>
        ))}
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
      {activeTab === 'general' && (
        <>
      {/* –†–æ–∑–¥—ñ–ª –ó–æ–≤–Ω—ñ—à–Ω—ñ–π –≤–∏–≥–ª—è–¥ */}
      <div className="card" style={{ marginBottom: '2rem', padding: '2rem' }}>
        <h2 style={{
          fontSize: '1.5rem',
          fontWeight: '600',
          marginBottom: '1.5rem',
          color: 'var(--text-primary)',
          display: 'flex',
          alignItems: 'center',
          gap: '0.5rem'
        }}>
          <Palette size={24} />
          –ó–æ–≤–Ω—ñ—à–Ω—ñ–π –≤–∏–≥–ª—è–¥
        </h2>

        {/* –¢–µ–º–∞ */}
        <div style={{ marginBottom: '1.5rem' }}>
          <label style={{
            display: 'block',
            fontSize: '1rem',
            fontWeight: '500',
            marginBottom: '0.75rem',
            color: 'var(--text-primary)'
          }}>
            –¢–µ–º–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
          </label>
          <div style={{ display: 'flex', gap: '0.75rem', flexWrap: 'wrap' }}>
            {[
              { value: 'dark', label: '–¢–µ–º–Ω–∞', icon: Moon },
              { value: 'light', label: '–°–≤—ñ—Ç–ª–∞', icon: Sun },
              { value: 'auto', label: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ', icon: RefreshCw }
            ].map(theme => {
              const Icon = theme.icon;
              return (
                <button
                  key={theme.value}
                  className={settings.theme === theme.value ? 'btn btn-primary' : 'btn btn-secondary'}
                  onClick={() => handleSettingChange('theme', theme.value)}
                  style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: '0.5rem',
                    minWidth: '120px'
                  }}
                >
                  <Icon size={16} />
                  {theme.label}
                </button>
              );
            })}
          </div>
        </div>

        {/* –ê–Ω—ñ–º–∞—Ü—ñ—ó */}
        <div style={{ marginBottom: '1.5rem' }}>
          <label style={{
            display: 'flex',
            alignItems: 'center',
            gap: '0.75rem',
            fontSize: '1rem',
            fontWeight: '500',
            color: 'var(--text-primary)',
            cursor: 'pointer'
          }}>
            <input
              type="checkbox"
              checked={settings.showAnimations}
              onChange={(e) => handleSettingChange('showAnimations', e.target.checked)}
              style={{ transform: 'scale(1.2)' }}
            />
            –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó —Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏
          </label>
        </div>

        {/* –ö–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ä–µ–∂–∏–º */}
        <div>
          <label style={{
            display: 'flex',
            alignItems: 'center',
            gap: '0.75rem',
            fontSize: '1rem',
            fontWeight: '500',
            color: 'var(--text-primary)',
            cursor: 'pointer'
          }}>
            <input
              type="checkbox"
              checked={settings.compactMode}
              onChange={(e) => handleSettingChange('compactMode', e.target.checked)}
              style={{ transform: 'scale(1.2)' }}
            />
            –ö–æ–º–ø–∞–∫—Ç–Ω–∏–π —Ä–µ–∂–∏–º (–º–µ–Ω—à—ñ –≤—ñ–¥—Å—Ç—É–ø–∏)
          </label>
        </div>
      </div>

      {/* –†–æ–∑–¥—ñ–ª –ó–≤—É–∫ */}
      <div className="card" style={{ marginBottom: '2rem', padding: '2rem' }}>
        <h2 style={{
          fontSize: '1.5rem',
          fontWeight: '600',
          marginBottom: '1.5rem',
          color: 'var(--text-primary)',
          display: 'flex',
          alignItems: 'center',
          gap: '0.5rem'
        }}>
          <Volume2 size={24} />
          –ó–≤—É–∫–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏
        </h2>

        <div>
          <label style={{
            display: 'flex',
            alignItems: 'center',
            gap: '0.75rem',
            fontSize: '1rem',
            fontWeight: '500',
            color: 'var(--text-primary)',
            cursor: 'pointer'
          }}>
            <input
              type="checkbox"
              checked={settings.soundEnabled}
              onChange={(e) => handleSettingChange('soundEnabled', e.target.checked)}
              style={{ transform: 'scale(1.2)' }}
            />
            {settings.soundEnabled ? <Volume2 size={20} /> : <VolumeX size={20} />}
            –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–≤—É–∫–æ–≤—ñ –µ—Ñ–µ–∫—Ç–∏
          </label>
        </div>
      </div>

      {/* –†–æ–∑–¥—ñ–ª –ú–æ–≤–∞ */}
      <div className="card" style={{ marginBottom: '2rem', padding: '2rem' }}>
        <h2 style={{
          fontSize: '1.5rem',
          fontWeight: '600',
          marginBottom: '1.5rem',
          color: 'var(--text-primary)',
          display: 'flex',
          alignItems: 'center',
          gap: '0.5rem'
        }}>
          <Globe size={24} />
          –ú–æ–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        </h2>

        <div style={{ display: 'flex', gap: '0.75rem', flexWrap: 'wrap' }}>
          {[
            { value: 'uk', label: 'üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞' },
            { value: 'en', label: 'üá∫üá∏ English' },
            { value: 'pl', label: 'üáµüá± Polski' }
          ].map(lang => (
            <button
              key={lang.value}
              className={settings.language === lang.value ? 'btn btn-primary' : 'btn btn-secondary'}
              onClick={() => handleSettingChange('language', lang.value)}
              style={{ minWidth: '140px' }}
            >
              {lang.label}
            </button>
          ))}
        </div>
        <p style={{
          fontSize: '0.875rem',
          color: 'var(--text-muted)',
          marginTop: '0.75rem'
        }}>
          –ù–∞—Ä–∞–∑—ñ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞. –Ü–Ω—à—ñ –º–æ–≤–∏ –±—É–¥—É—Ç—å –¥–æ–¥–∞–Ω—ñ –≤ –º–∞–π–±—É—Ç–Ω—ñ—Ö –æ–Ω–æ–≤–ª–µ–Ω–Ω—è—Ö.
        </p>
      </div>

      {/* –†–æ–∑–¥—ñ–ª –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è */}
      <div className="card" style={{ marginBottom: '2rem', padding: '2rem' }}>
        <h2 style={{
          fontSize: '1.5rem',
          fontWeight: '600',
          marginBottom: '1.5rem',
          color: 'var(--text-primary)'
        }}>
          üíæ –ê–≤—Ç–æ–∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        </h2>

        <div style={{ marginBottom: '1.5rem' }}>
          <label style={{
            display: 'flex',
            alignItems: 'center',
            gap: '0.75rem',
            fontSize: '1rem',
            fontWeight: '500',
            color: 'var(--text-primary)',
            cursor: 'pointer',
            marginBottom: '1rem'
          }}>
            <input
              type="checkbox"
              checked={settings.autoSave}
              onChange={(e) => handleSettingChange('autoSave', e.target.checked)}
              style={{ transform: 'scale(1.2)' }}
            />
            –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
          </label>

          {settings.autoSave && (
            <div>
              <label style={{
                display: 'block',
                fontSize: '0.875rem',
                fontWeight: '500',
                marginBottom: '0.5rem',
                color: 'var(--text-secondary)'
              }}>
                –Ü–Ω—Ç–µ—Ä–≤–∞–ª –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {settings.autoSaveInterval} —Ö–≤
              </label>
              <input
                type="range"
                min="1"
                max="30"
                value={settings.autoSaveInterval}
                onChange={(e) => handleSettingChange('autoSaveInterval', parseInt(e.target.value))}
                style={{
                  width: '100%',
                  maxWidth: '300px'
                }}
              />
            </div>
          )}
        
        </div>
      </div>

      {/* –†–æ–∑–¥—ñ–ª –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö */}
      <DatabaseSettings />

      {/* –†–æ–∑–¥—ñ–ª –î–∞–Ω—ñ */}
      <div className="card" style={{ marginBottom: '2rem', padding: '2rem' }}>
        <h2 style={{
          fontSize: '1.5rem',
          fontWeight: '600',
          marginBottom: '1.5rem',
          color: 'var(--text-primary)'
        
        }}>
          üìÅ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –¥–∞–Ω–∏–º–∏
        </h2>

        <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
          {/* –ï–∫—Å–ø–æ—Ä—Ç */}
          <button
            className="btn btn-primary"
            onClick={() => setShowExportWizard(true)}
            disabled={isExporting}
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              justifyContent: 'center'
            }}
          >
            <Package size={20} />
            {isExporting ? '–ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è...' : '–†–æ–∑—à–∏—Ä–µ–Ω–∏–π –µ–∫—Å–ø–æ—Ä—Ç'}
          </button>

          {/* –Ü–º–ø–æ—Ä—Ç */}
          <div>
            <input
              type="file"
              accept=".json"
              onChange={handleImportData}
              style={{ display: 'none' }}
              id="import-file"
              disabled={isImporting}
            />
            <label
              htmlFor="import-file"
              className="btn btn-secondary"
              style={{
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem',
                justifyContent: 'center',
                cursor: isImporting ? 'not-allowed' : 'pointer',
                opacity: isImporting ? 0.6 : 1
              }}
            >
              <Upload size={20} />
              {isImporting ? '–Ü–º–ø–æ—Ä—Ç—É–≤–∞–Ω–Ω—è...' : '–Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ'}
            </label>
          </div>

          {/* –°–∫–∏–¥–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å */}
          <button
            className="btn btn-secondary"
            onClick={handleResetSettings}
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              justifyContent: 'center'
            }}
          >
            <RefreshCw size={20} />
            –°–∫
            –∏–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
          </button>

          {/* –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö */}
          <button
            className="btn btn-danger"
            onClick={handleClearAllData}
            style={{
              display: 'flex',
              alignItems: 'center',
              gap: '0.5rem',
              justifyContent: 'center'
            }}
          >
            
            <Trash2 size={20} />
            –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –¥–∞–Ω—ñ
          </button>
        </div>

        <div style={{
          marginTop: '1rem',
          padding: '1rem',
          background: 'var(--bg-tertiary)',
          borderRadius: 'var(--radius-md)',
          fontSize: '0.875rem',
          color: 'var(--text-muted)'
        }}>
          <strong>–ü—Ä–∏–º—ñ—Ç–∫–∞:</strong> –ï–∫—Å–ø–æ—Ä—Ç –≤–∫–ª—é—á–∞—î –≤—Å—ñ —Å–≤—ñ—Ç–∏, –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤, –ª–æ—Ä, —Ö—Ä–æ–Ω–æ–ª–æ–≥—ñ—ó, –Ω–æ—Ç–∞—Ç–∫–∏, –∑–≤'—è–∑–∫–∏, –∫–∞—Ä—Ç–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è. 
          –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó –≤–∞—à–∏—Ö –¥–∞–Ω–∏—Ö.
        </div>
      </div>

      {/* –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–µ—Ä—Å—ñ—é */}
      <div className="card" style={{ padding: '1.5rem', textAlign: 'center' }}>
        <h3 style={{
          fontSize: '1.125rem',
          fontWeight: '600',
          marginBottom: '0.5rem',
          color: 'var(--text-primary)'
        }}>
          Fantasy World Builder
        </h3>
        <p style={{ color: 'var(--text-secondary)', fontSize: '0.875rem' }}>
          –í–µ—Ä—Å—ñ—è 1.0.0 ‚Ä¢ –°—Ç–≤–æ—Ä–µ–Ω–æ –∑ ‚ù§Ô∏è –¥–ª—è —Ñ–µ–Ω—Ç–µ–∑—ñ–π–Ω–∏—Ö —Å–≤—ñ—Ç—ñ–≤
        </p>
      </div>
        </>
      )}

      {activeTab === 'database' && <DatabaseSettings />}
      {activeTab === 'plugins' && <PluginManager />}
      {activeTab === 'store' && <PluginStore />}

      {/* –ï–∫—Å–ø–æ—Ä—Ç –≤—ñ–∑–∞—Ä–¥ */}
      {showExportWizard && currentWorldId && (
        <ExportWizard
          isOpen={showExportWizard}
          onClose={() => setShowExportWizard(false)}
          worldId={currentWorldId}
          worldName={getCurrentWorld()?.name || '–ù–µ–≤—ñ–¥–æ–º–∏–π —Å–≤—ñ—Ç'}
        />
      )}
    </div>
  );
};